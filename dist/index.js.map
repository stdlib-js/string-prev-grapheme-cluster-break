{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' );\nvar codePointAt = require( '@stdlib/string-code-point-at' );\nvar hasUTF16SurrogatePairAt = require( '@stdlib/assert-has-utf16-surrogate-pair-at' );\nvar grapheme = require( '@stdlib/string-tools-grapheme-cluster-break' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar breakType = grapheme.breakType;\nvar breakProperty = grapheme.breakProperty;\nvar emojiProperty = grapheme.emojiProperty;\n\n\n// MAIN //\n\n/**\n* Returns the previous extended grapheme cluster break in a string before a specified position.\n*\n* @param {string} str - input string\n* @param {integer} [fromIndex=str.length-1] - position\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be an integer\n* @returns {NonNegativeInteger} previous grapheme break position\n*\n* @example\n* var out = prevGraphemeClusterBreak( 'last man standing', 4 );\n* // returns 3\n*\n* @example\n* var out = prevGraphemeClusterBreak( 'presidential election', 8 );\n* // returns 7\n*\n* @example\n* var out = prevGraphemeClusterBreak( '\u0905\u0928\u0941\u091A\u094D\u091B\u0947\u0926', 2 );\n* // returns 0\n*\n* @example\n* var out = prevGraphemeClusterBreak( '\uD83C\uDF37', 1 );\n* // returns -1\n*/\nfunction prevGraphemeClusterBreak( str, fromIndex ) {\n\tvar breaks;\n\tvar emoji;\n\tvar ans;\n\tvar len;\n\tvar idx;\n\tvar cp;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tlen = str.length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tidx = fromIndex;\n\t} else {\n\t\tidx = len - 1;\n\t}\n\tif ( len === 0 || idx <= 0 ) {\n\t\treturn -1;\n\t}\n\tif ( idx >= len ) {\n\t\tidx = len - 1;\n\t}\n\n\t// Initialize caches for storing grapheme break and emoji properties:\n\tbreaks = [];\n\temoji = [];\n\n\t// Get the code point for the starting index:\n\tcp = codePointAt( str, 0 );\n\n\t// Get the corresponding grapheme break and emoji properties:\n\tbreaks.push( breakProperty( cp ) );\n\temoji.push( emojiProperty( cp ) );\n\n\tans = -1;\n\tfor ( i = 1; i <= idx; i++ ) {\n\t\t// If the current character is part of a surrogate pair, move along...\n\t\tif ( hasUTF16SurrogatePairAt( str, i-1 ) ) {\n\t\t\tans = i-2;\n\t\t\tbreaks.length = 0;\n\t\t\temoji.length = 0;\n\t\t\tcontinue;\n\t\t}\n\t\tcp = codePointAt( str, i );\n\n\t\t// Get the corresponding grapheme break and emoji properties:\n\t\tbreaks.push( breakProperty( cp ) );\n\t\temoji.push( emojiProperty( cp ) );\n\n\t\t// Determine if we've encountered a grapheme cluster break...\n\t\tif ( breakType( breaks, emoji ) > 0 ) {\n\t\t\tans = i-1;\n\t\t\tbreaks.length = 0;\n\t\t\temoji.length = 0;\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn ans;\n}\n\n\n// EXPORTS //\n\nmodule.exports = prevGraphemeClusterBreak;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the prev extended grapheme cluster break in a string before a specified position.\n*\n* @module @stdlib/string-prev-grapheme-cluster-break\n*\n* @example\n* var prevGraphemeClusterBreak = require( '@stdlib/string-prev-grapheme-cluster-break' );\n*\n* var out = prevGraphemeClusterBreak( '\u0905\u0928\u0941\u091A\u094D\u091B\u0947\u0926', 2 );\n* // returns 0\n*\n* out = prevGraphemeClusterBreak( '\uD83C\uDF37', 1 );\n* // returns -1\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAY,QAAS,2BAA4B,EACjDC,EAAc,QAAS,8BAA+B,EACtDC,EAA0B,QAAS,4CAA6C,EAChFC,EAAW,QAAS,6CAA8C,EAClEC,EAAS,QAAS,uBAAwB,EAK1CC,EAAYF,EAAS,UACrBG,EAAgBH,EAAS,cACzBI,EAAgBJ,EAAS,cA8B7B,SAASK,EAA0BC,EAAKC,EAAY,CACnD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAAClB,EAAUU,CAAI,EACnB,MAAM,IAAI,UAAWL,EAAQ,kEAAmEK,CAAI,CAAE,EAGvG,GADAK,EAAML,EAAI,OACL,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACT,EAAWU,CAAU,EAC1B,MAAM,IAAI,UAAWN,EAAQ,qEAAsEM,CAAU,CAAE,EAEhHK,EAAML,CACP,MACCK,EAAMD,EAAM,EAEb,GAAKA,IAAQ,GAAKC,GAAO,EACxB,MAAO,GAkBR,IAhBKA,GAAOD,IACXC,EAAMD,EAAM,GAIbH,EAAS,CAAC,EACVC,EAAQ,CAAC,EAGTI,EAAKf,EAAaQ,EAAK,CAAE,EAGzBE,EAAO,KAAML,EAAeU,CAAG,CAAE,EACjCJ,EAAM,KAAML,EAAeS,CAAG,CAAE,EAEhCH,EAAM,GACAI,EAAI,EAAGA,GAAKF,EAAKE,IAAM,CAE5B,GAAKf,EAAyBO,EAAKQ,EAAE,CAAE,EAAI,CAC1CJ,EAAMI,EAAE,EACRN,EAAO,OAAS,EAChBC,EAAM,OAAS,EACf,QACD,CAQA,GAPAI,EAAKf,EAAaQ,EAAKQ,CAAE,EAGzBN,EAAO,KAAML,EAAeU,CAAG,CAAE,EACjCJ,EAAM,KAAML,EAAeS,CAAG,CAAE,EAG3BX,EAAWM,EAAQC,CAAM,EAAI,EAAI,CACrCC,EAAMI,EAAE,EACRN,EAAO,OAAS,EAChBC,EAAM,OAAS,EACf,QACD,CACD,CACA,OAAOC,CACR,CAKAf,EAAO,QAAUU,IC/FjB,IAAIU,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isString", "isInteger", "codePointAt", "hasUTF16SurrogatePairAt", "grapheme", "format", "breakType", "breakProperty", "emojiProperty", "prevGraphemeClusterBreak", "str", "fromIndex", "breaks", "emoji", "ans", "len", "idx", "cp", "i", "main"]
}
