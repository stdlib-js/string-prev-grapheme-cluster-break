{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport isInteger from '@stdlib/assert-is-integer' ;\nimport codePointAt from '@stdlib/string-code-point-at' ;\nimport hasUTF16SurrogatePairAt from '@stdlib/assert-has-utf16-surrogate-pair-at' ;\nimport grapheme from '@stdlib/string-tools-grapheme-cluster-break' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// VARIABLES //\n\nvar breakType = grapheme.breakType;\nvar breakProperty = grapheme.breakProperty;\nvar emojiProperty = grapheme.emojiProperty;\n\n\n// MAIN //\n\n/**\n* Returns the previous extended grapheme cluster break in a string before a specified position.\n*\n* @param {string} str - input string\n* @param {integer} [fromIndex=str.length-1] - position\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be an integer\n* @returns {NonNegativeInteger} previous grapheme break position\n*\n* @example\n* var out = prevGraphemeClusterBreak( 'last man standing', 4 );\n* // returns 3\n*\n* @example\n* var out = prevGraphemeClusterBreak( 'presidential election', 8 );\n* // returns 7\n*\n* @example\n* var out = prevGraphemeClusterBreak( 'अनुच्छेद', 2 );\n* // returns 0\n*\n* @example\n* var out = prevGraphemeClusterBreak( '🌷', 1 );\n* // returns -1\n*/\nfunction prevGraphemeClusterBreak( str, fromIndex ) {\n\tvar breaks;\n\tvar emoji;\n\tvar ans;\n\tvar len;\n\tvar idx;\n\tvar cp;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '0hO3R', str ) );\n\t}\n\tlen = str.length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( '0hO7x', fromIndex ) );\n\t\t}\n\t\tidx = fromIndex;\n\t} else {\n\t\tidx = len - 1;\n\t}\n\tif ( len === 0 || idx <= 0 ) {\n\t\treturn -1;\n\t}\n\tif ( idx >= len ) {\n\t\tidx = len - 1;\n\t}\n\n\t// Initialize caches for storing grapheme break and emoji properties:\n\tbreaks = [];\n\temoji = [];\n\n\t// Get the code point for the starting index:\n\tcp = codePointAt( str, 0 );\n\n\t// Get the corresponding grapheme break and emoji properties:\n\tbreaks.push( breakProperty( cp ) );\n\temoji.push( emojiProperty( cp ) );\n\n\tans = -1;\n\tfor ( i = 1; i <= idx; i++ ) {\n\t\t// If the current character is part of a surrogate pair, move along...\n\t\tif ( hasUTF16SurrogatePairAt( str, i-1 ) ) {\n\t\t\tans = i-2;\n\t\t\tbreaks.length = 0;\n\t\t\temoji.length = 0;\n\t\t\tcontinue;\n\t\t}\n\t\tcp = codePointAt( str, i );\n\n\t\t// Get the corresponding grapheme break and emoji properties:\n\t\tbreaks.push( breakProperty( cp ) );\n\t\temoji.push( emojiProperty( cp ) );\n\n\t\t// Determine if we've encountered a grapheme cluster break...\n\t\tif ( breakType( breaks, emoji ) > 0 ) {\n\t\t\tans = i-1;\n\t\t\tbreaks.length = 0;\n\t\t\temoji.length = 0;\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn ans;\n}\n\n\n// EXPORTS //\n\nexport default prevGraphemeClusterBreak;\n"],"names":["breakType","grapheme","breakProperty","emojiProperty","prevGraphemeClusterBreak","str","fromIndex","breaks","emoji","ans","len","idx","cp","i","isString","TypeError","format","length","arguments","isInteger","codePointAt","push","hasUTF16SurrogatePairAt"],"mappings":";;8jBAgCA,IAAIA,EAAYC,EAASD,UACrBE,EAAgBD,EAASC,cACzBC,EAAgBF,EAASE,cA8B7B,SAASC,EAA0BC,EAAKC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUT,GACf,MAAM,IAAIU,UAAWC,EAAQ,QAASX,IAGvC,GADAK,EAAML,EAAIY,OACLC,UAAUD,OAAS,EAAI,CAC3B,IAAME,EAAWb,GAChB,MAAM,IAAIS,UAAWC,EAAQ,QAASV,IAEvCK,EAAML,OAENK,EAAMD,EAAM,EAEb,GAAa,IAARA,GAAaC,GAAO,EACxB,OAAQ,EAkBT,IAhBKA,GAAOD,IACXC,EAAMD,EAAM,GAIbH,EAAS,GACTC,EAAQ,GAGRI,EAAKQ,EAAaf,EAAK,GAGvBE,EAAOc,KAAMnB,EAAeU,IAC5BJ,EAAMa,KAAMlB,EAAeS,IAE3BH,GAAO,EACDI,EAAI,EAAGA,GAAKF,EAAKE,IAEjBS,EAAyBjB,EAAKQ,EAAE,IACpCJ,EAAMI,EAAE,EACRN,EAAOU,OAAS,EAChBT,EAAMS,OAAS,IAGhBL,EAAKQ,EAAaf,EAAKQ,GAGvBN,EAAOc,KAAMnB,EAAeU,IAC5BJ,EAAMa,KAAMlB,EAAeS,IAGtBZ,EAAWO,EAAQC,GAAU,IACjCC,EAAMI,EAAE,EACRN,EAAOU,OAAS,EAChBT,EAAMS,OAAS,IAIjB,OAAOR"}